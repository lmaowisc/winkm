[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Calculating win-loss statistics using summary data",
    "section": "",
    "text": "WinKM provides a simple way to calculate win-loss statistics using summary data. This is useful when you have access to only published Kaplan-Meier (KM) curves of overall survival (OS) and nonfatal event-free survival time (EFS), but not the individual patient data, as is often the case in systematic reviews and meta-analyses."
  },
  {
    "objectID": "index.html#basics",
    "href": "index.html#basics",
    "title": "Calculating win-loss statistics using summary data",
    "section": "Basics",
    "text": "Basics\nThe basic idea is to use the published Kaplan-Meier curves to estimate the survival probabilities at different time points. These probabilities are then used to calculate the win-loss statistics."
  },
  {
    "objectID": "index.html#basic-idea",
    "href": "index.html#basic-idea",
    "title": "Calculating win-loss statistics using summary data",
    "section": "Basic idea",
    "text": "Basic idea\nThe basic idea is to consider the win and loss proportions by a certain time as a functional of the joint distribution of OS and EFS. Since we only have the marginal distributions through the KM curves, we will need to infer their associations via additional summary data like total event counts and rates.\nAll in all, we need the following for each arm:\n\nKM estimates for OS and EFS (obtained by scanning and digitizing the curves using free online tools like WebPlotDigitizer;\nAt-risk table at selected time points (usually provided below the KM curves);\nTotal event counts (reported in the CONSORT diagram or results section):\n\nDeaths (OS);\nEFS endpoints (first of death/nonfatal event);\nNonfatal event."
  },
  {
    "objectID": "index.html#example",
    "href": "index.html#example",
    "title": "Calculating win-loss statistics using summary data",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "index.html#an-example",
    "href": "index.html#an-example",
    "title": "Calculating win-loss statistics using summary data",
    "section": "An Example",
    "text": "An Example\n\nInstallation: a step-by-step guide\nDownload and compile the R functions from the winkm_functions.R script available at the GitHub repository.\n\nsource(\"winkm_functions.R\")\n\n\n\nOriginal study\nConsider the ESCORT-1st trial (Luo et al. 2021, open-access) that compares the efficacy of camrelizumab (\\(N=298\\)) versus placebo (\\(N=298\\)) (both in combination with chemotherapy) in patients with advanced esophageal squamous cell carcinoma on the co-primary endpoints of\n\nOverall survival (OS);\nProgression free survival (PFS).\n\n\n\nScanning the KM curves\nThe KM curves for OS and PFS are accessible in Figure 2 of the original publication. I scanned the graphs using WebPlotDigitizer and stored the digitized data in:\n\ncamrelizumab_os.csv for OS;\ncamrelizumab_pfs.csv for PFS."
  },
  {
    "objectID": "index.html#an-example-a-step-by-step-guide",
    "href": "index.html#an-example-a-step-by-step-guide",
    "title": "Calculating win-loss statistics using summary data",
    "section": "An Example: a step-by-step guide",
    "text": "An Example: a step-by-step guide\n\nInstallation\nDownload and compile the R functions from the winkm_functions.R script available at the GitHub repository.\n\nsource(\"winkm_functions.R\")\nlibrary(tidyverse) # for data manipulation and visualization\nlibrary(ggsci) # for color palettes\n\n\n\nOriginal study\nConsider the ESCORT-1st trial (Luo et al. 2021, open-access) that compares the efficacy of camrelizumab (\\(N=298\\)) versus placebo (\\(N=298\\)) (both in combination with chemotherapy) in patients with advanced esophageal squamous cell carcinoma on the co-primary endpoints of\n\nOverall survival (OS);\nProgression free survival (PFS).\n\n\n\nScan the KM curves\nThe KM curves for OS and PFS are accessible in Figure 2 of the original publication. I scanned the graphs using WebPlotDigitizer and stored the digitized data in:\n\ncamrelizumab_os.csv for OS;\ncamrelizumab_pfs.csv for PFS.\n\nRead and clean OS data:\n\n# Reading (OS) from CSV, skipping first 2 lines, specifying col_names manually\n# Data look like this:\n# placebo_chemo     camr_chemo  \n# X Y   X   Y\n# 0.178704185   1   0.111817005 0.995059289\n# 0.580821703   0.994071146 0.536244961 0.990118577\nos_data &lt;- readr::read_csv(\n  \"data/Camrelizumab Luo 2021 - JAMA/camrelizumab_os.csv\",  # Replace with your path\n  skip = 2,\n  col_names = c(\"time_placebo\", \"surv_placebo\",\n                \"time_camr\",    \"surv_camr\")\n  # col_names must be in the format: \"time_group\", \"surv_group\"\n)\n\n# Pivot to long, labeling groups\nos_long &lt;- prepare_km_data(\n  km_data       = os_data,\n  time_cols     = c(\"time_placebo\", \"time_camr\"),\n  surv_cols     = c(\"surv_placebo\", \"surv_camr\"),\n  ref = \"placebo\", # \"group0\" in \"time_group0\", \"surv_group0\"\n  group_labels  = c(\"Placebo\", \"Camrelizumab\") # First ref (ctr) and then trt\n)\n\nRead and clean PFS data:\n\n# Reading (PFS) from CSV, skipping first 2 lines, specifying col_names manually\n# Data look like this:\n# placebo_chemo     camr_chemo  \n# X Y   X   Y\n# 0.203515376   1.001333549 0.203515376 0.996069918\n# 0.582249871   0.997326755 0.682098056 0.989870686\npfs_data &lt;- readr::read_csv(\n  \"data/Camrelizumab Luo 2021 - JAMA/camrelizumab_pfs.csv\", # Replace with your path\n  skip = 2,\n  col_names = c(\"time_placebo\", \"surv_placebo\",\n                \"time_camr\",    \"surv_camr\")\n)\n\n# Pivot to long, labeling groups\npfs_long &lt;- prepare_km_data(\n  km_data       = pfs_data,\n  time_cols     = c(\"time_placebo\", \"time_camr\"),\n  surv_cols     = c(\"surv_placebo\", \"surv_camr\"),\n  ref = \"placebo\",\n  group_labels  = c(\"Placebo\", \"Camrelizumab\")\n)\n\nMerge the OS and PFS data:\n\n# Merge endpoints\ndf_km &lt;- merge_endpoints(os_long, pfs_long)\n# # A tibble: 398 × 4\n#    group    time    os   pfs\n#    &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#  1 Placebo 0     1     1    \n#  2 Placebo 0.112 1     1.00\n\n# Compute increments of survival/cumulative hazard functions\n# in preparation for win-loss calculations\ndf_increments &lt;- compute_increments(df_km)\n# # A tibble: 398 × 9\n#    group    time    os   pfs  os_p       dos pfs_p      dpfs     dLpfs\n#    &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n#  1 Placebo 0     1     1     1     0         1     0         0        \n#  2 Placebo 0.112 1     1.00  1     0         1     0         0        \n#  3 Placebo 0.179 1     1.00  1     0         1.00  0         0        \n#  4 Placebo 0.204 1.00  1.00  1     0.000366  1.00  0         0        \n#  5 Placebo 0.536 0.995 0.998 1.00  0.00491   1.00  0.00352   0.00352 \n\nPlot the digitized data and compare with the original KM curves of Luo et al. (2021) (Figure 2):\n\n\nPlot KM curves\n# Plot the KM curves and compare with the published ones\ndf_km |&gt; \n  ggplot(aes(x = time, y = os, color = group)) +\n  geom_step(aes(linetype = \"OS\"), linewidth = 0.8) +\n  geom_step(aes(y = pfs, linetype = \"PFS\"), linewidth = 0.8) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  scale_x_continuous(limits = c(0, 18), breaks = seq(0, 18, by = 2), expand = expansion(c(0,0))) +\n  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2), expand = expansion(c(0,0))) +\n  scale_color_jama() + # use the JAMA color palette\n  scale_linetype_manual(NULL, values = 1:2) +\n  labs(\n    title = \"Camrelizumab trial\",\n    x = \"Time (months)\",\n    y = \"Survival probability\",\n    color = NULL\n  )  +\n  theme_classic() +\n  theme(\n    panel.grid.major.y = element_line(),\n    legend.position = c(1, 1),\n    legend.justification = c(1, 1),\n    legend.key.width = unit(1, \"cm\")\n  )\n\n\n\n\n\n\n\n\n\n\n\nInput the risk tables\nThe at-risk tables for OS and PFS in Figure 2 are manually entered in a csv file:\n\nrisk_table.csv\n\nRead and the risk table and compute the total follow-up times:\n\n# Read risk table, in the format:\n# time_col, endpoint_col, group_cols (2)\n# Actual data look like this:\n# time  endpoint    camr_chemo  placebo_chemo\n# 0 os  298 298\n# 2 os  294 289\n# 4 os  285 275\nrisk_table &lt;- readr::read_csv(\n  \"data/Camrelizumab Luo 2021 - JAMA/risk_table.csv\"\n)\n# Compute follow-up times\nfl_times &lt;- compute_followup(risk_table,\n                  time_col     = \"time\",\n                  endpoint_col = \"endpoint\",\n                  group_cols   = c(\"placebo_chemo\", \"camr_chemo\"),\n                  group_labels = c(\"Placebo\", \"Camrelizumab\")\n                 )\n# # A tibble: 4 × 3\n#   endpoint group        total_followup\n#   &lt;chr&gt;    &lt;fct&gt;                 &lt;dbl&gt;\n# 1 os       Placebo                2690\n# 2 os       Camrelizumab           2747\n# 3 pfs      Placebo                1528\n# 4 pfs      Camrelizumab           1919\n\n\n\nInput the total event counts\nThe total numbers of OS and PFS events are reported in the text of the paper; the total numbers of progressive disease are reported in the CONSORT diagram (Figure 1).\n\n# Manually input event numbers\n# trt: Camrelizumab\nevent_nums_camr &lt;- c(\n  ND = 135, # Deaths\n  NP = 144, # Progression (141 radiographic + 3 clinical progression)\n  Ns = 199  # PFS endpoints\n)\n# ctr: Placebo\nevent_nums_plac &lt;- c(\n  ND = 174, # Deaths\n  NP = 193, # Progression (189 radiographic + 4 clinical progression)\n  Ns = 229  # PFS endpoints\n)\n\nCompute the association parameter \\(\\theta\\) using follow-up lengths and event counts:\n\n# Compute theta\ntheta &lt;- compute_theta(\n  event_nums_trt = event_nums_camr,\n  event_nums_ctr = event_nums_plac,\n  fl_times = fl_times,\n  ref = \"Placebo\" # labelled reference group\n)\n# 1 - 1/theta is Kendall's tau\n# theta_trt theta_ctr \n# 0.4193222 0.5458616\n\n\n\nCalculate win-loss probabilities\nFinally, we can calculate the win-loss statistics at functions of time:\n\n# Win-loss probabilities calculated from all summary data\ndf_wl &lt;- compute_win_loss(\n  df_inc         = df_increments,     # From KM estimates\n  event_nums_trt = event_nums_camr,   # Total event counts\n  event_nums_ctr = event_nums_plac,\n  theta = theta,                       # Association parameter\n  ref = \"Placebo\"                      # Reference group\n)\n# # A tibble: 199 × 7\n#     time   win_os loss_os   win_pd  loss_pd      win    loss\n#    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n#  1 0     0        0       0        0        0        0      \n#  2 0.112 0        0.00494 0        0        0        0.00494\n#  3 0.179 0        0.00572 0        0.000779 0        0.00650\n#  4 0.204 0.000364 0.00601 0        0.00106  0.000364 0.00707\n#  5 0.536 0.00522  0.00986 0        0.00272  0.00522  0.0126 \n\nHere:\n\ntime: time points;\nwin_os, loss_os: win and loss probabilities for OS;\nwin_pd, loss_pd: win and loss probabilities for PFS (when OS is tied);\nwin, loss: overall win and loss probabilities.\n\n\n\nDisplay the results\nFirst, plot the approximated win-loss probabilities over time:\n\n\nPlot win-loss probabilities\ndf_wl |&gt;\n  ggplot(aes(x = time)) +\n  geom_area(aes(y = win, fill = \"Camrelizumab\"), alpha = 0.7) +\n  geom_area(aes(y = win_os, fill = \"Camrelizumab\"))  +\n  geom_area(aes(y = - loss, fill = \"Placebo\"), alpha = 0.7) +\n  geom_area(aes(y = - loss_os, fill = \"Placebo\")) +\n  geom_line(data = df_wl,\n            aes(y = win, color = \"Camrelizumab\"), linewidth = 1, \n            show.legend = FALSE) +\n  geom_line(data = df_wl,\n            aes(y = - loss, color = \"Placebo\"), linewidth = 1,\n            show.legend = FALSE) +\n  scale_y_continuous(\"Win/Loss probability\", limits = c(-0.42, 0.62),\n                     breaks = seq(-0.4, 0.6, by = 0.2),\n                     labels = abs(seq(-0.4, 0.6, by = 0.2))) +\n  scale_x_continuous(\"Time (months)\", limits = c(0, 18), expand = expansion(c(0,0)),\n                     breaks = seq(0, 18, by = 2)) +\n  scale_fill_jama(limits = c(\"Placebo\", \"Camrelizumab\")) +\n  theme_classic() +\n  theme(\n    legend.position = c(0, 1),\n    legend.justification = c(0, 1.35),\n    # legend.direction = \"horizontal\",\n    legend.title = element_blank(),\n    legend.background = element_rect(fill = \"transparent\"),\n    panel.grid.major.y = element_line()\n  )\n\n\n\n\n\n\n\n\n\n\nDarker color represents win/loss on OS; light color represents win/loss on PFS.\n\nNext, we can summarize the win-loss statistics at selected time points:\n\n\nCalculate win-loss statistics at selected time points\n# Function to calculate win odds\nwin_odds &lt;- function(win, loss) {\n  tie &lt;- 1 - win - loss\n    (win + 0.5 * tie) / (loss + 0.5 * tie)\n}\n\n# Specify time points\nt0 &lt;- c(6, 12, 18) # Selected months\n# Compute win ratio at t0\nstats &lt;- tibble(\n  t0,                              # Time points\n  wl = map(t0, ~ df_wl |&gt;          # Get the win-loss stats at latest time point to t0\n    filter(time &lt;= .x) |&gt;\n    slice_tail(n = 1) |&gt; \n      select(win_os, loss_os, win, loss)\n  ) \n) |&gt; \n  unnest(wl) |&gt; \n  mutate(                          # Compute win ratio, win odds, and net benefit\n   win_ratio_os = win_os / loss_os,\n   win_ratio = win / loss,\n   win_odds_os = win_odds(win_os, loss_os),\n   win_odds = win_odds(win, loss),\n   net_benefit_os = win_os - loss_os,\n   net_benefit = win - loss\n  ) |&gt; \n  select(\n    t0, \n    win_ratio_os, win_odds_os, net_benefit_os,\n    win_ratio, win_odds, net_benefit\n  )\n\n# For table display\nlibrary(knitr)\n# Print the table\nstats |&gt; \n  kable(format = \"html\", digits = 2, caption = \"Win-loss statistics at selected time points\",\n        col.names = c(\"Time (months)\", \"Win ratio (OS)\", \"Win odds (OS)\", \"Net benefit (OS)\",\n                      \"Win ratio\", \"Win odds\", \"Net benefit\")\n        )\n\n\n\nWin-loss statistics at selected time points\n\n\nTime (months)\nWin ratio (OS)\nWin odds (OS)\nNet benefit (OS)\nWin ratio\nWin odds\nNet benefit\n\n\n\n\n6\n1.36\n1.08\n0.04\n1.46\n1.34\n0.14\n\n\n12\n1.40\n1.26\n0.11\n1.55\n1.54\n0.21\n\n\n18\n1.39\n1.33\n0.14\n1.48\n1.48\n0.19\n\n\n\n\n\n\n\nInterestingly, the inverse of 18-month win ratio for OS is 1/1.39=0.72, which is close to the hazard ratio of 0.70 reported in the paper. This is expected when the PH assumption is true (Oakes 2016)."
  },
  {
    "objectID": "papers.html",
    "href": "papers.html",
    "title": "Papers",
    "section": "",
    "text": "Mao, L. (2025). Approximating Win-Loss Probabilities Based on the Overall and Event-Free Survival Functions. (Preprint)"
  }
]